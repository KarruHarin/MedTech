
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
  USER
  DOCTOR
  ADMIN
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  password         String?
  role             UserRole  @default(USER)
  phone            String?   @unique
  numberVerified   Boolean   @default(false)
  image         String?
  about         String?
  accounts         Account[]
  @@map("users")
}


model DoctorProfile {
  userId           String @unique
  id                 Int       @id @default(autoincrement())
  legalName          String    
  gender             String
  dateOfBirth                String
  address            String
  country            String
  state              String
  city               String
  qualification      String
  specialization     String
  subSpecialist  String
  experienceYears         String
  consultationFees        String
}

model DoctorAvailabilityDetails {
   userId           String 
   id                 Int       @id @default(autoincrement())
 sessionFees        String
  sessionLength      String
  languages          String[]
   availableDays      String[]
  availableTimeFrom  String
  availableTimeTo    String
}

model DoctorLicense {
   userId           String 
  id                    Int    @id @default(autoincrement())
  imageUrl1            String
  publicId1            String
  imageUrl2            String
  publicId2            String
  registrationNumber1  String
  registrationNumber2  String
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordReset{
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email,token])
}

model Tracker {
  id              String       @id @default(uuid())
  user_id         String
  activity        Float
  sleep           Float
  wellness        Float
  overview_report Overview[]  
  health_monitoring HealthMonitoring[] 
  health_expected HealthExpected[]     
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Overview {
  id        String   @id @default(uuid())
  trackerId  String
  week String
  this_month   Float
  prev_month   Float
  tracker   Tracker  @relation(fields: [trackerId], references: [id], onDelete: Cascade)
}

model HealthMonitoring {
  id         String   @id @default(uuid())
  trackerId  String
  month     String
  stress_level     Float
 pulse  Float
  temperature     Float
  calories_burned     Float
  tracker    Tracker  @relation(fields: [trackerId], references: [id], onDelete: Cascade)
}

model HealthExpected {
  id         String   @id @default(uuid())
  trackerId  String
  month     String
  health     Float
  expected     Float
  tracker    Tracker  @relation(fields: [trackerId], references: [id], onDelete: Cascade)
}

model Otp {
  id      Int      @id @default(autoincrement())
  phone   String   @unique
  otp     String
  expiry  DateTime
}
model emailOtp {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  otp     String
  expiry  DateTime
}


model BookedAppointment {
  id           Int    @id @default(autoincrement())
  userId       String
  doctor_id    String
  time         String
  date         DateTime
  slot         Float
  doctorName   String 
  purpose      String
  reschedule   String
  status       String
  mode         String
  age          Float
  name         String
  gender       String
}

