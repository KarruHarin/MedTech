
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole{
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          UserRole @default(USER)
  image         String?
  about         String?
  phone         String?  @unique
  numberVerified  Boolean  @default(false)
  accounts      Account[]
  doctor_appointments DoctorAppointment[]
  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model PasswordReset{
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email,token])
}

model Appointment {
  id String @id @default(cuid())
  userId String
  email String
  phone String
  date DateTime

}

model Otp {
  id      Int      @id @default(autoincrement())
  phone   String   @unique
  otp     String
  expiry  DateTime
}

model Doctor {
  id      Int    @id @default(autoincrement())
  name           String  @unique
  specialization String
  experience     String
  available_days String[]
  timing         String
  fee            String
  personal_statement String
  Education      String
  Address        String
  Slots          Json
}

model DoctorAppointment {
  id           Int    @id @default(autoincrement())
  userId       String
  time         String
  doctorName   String @map("doctor_name")
  problem      String
  reschedule   String
  status       String
  mode         String
  age          String
  name         String
  gender       String
  appId        String @map("app_id")

  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("doctor_appointments")
}

